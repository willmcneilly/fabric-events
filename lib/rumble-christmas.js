// Generated by CoffeeScript 1.3.3
(function() {
  var SnowGlobe,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SnowGlobe = (function() {

    function SnowGlobe(window) {
      this.translateScore = __bind(this.translateScore, this);

      this.resetScore = __bind(this.resetScore, this);

      this.whileTime = __bind(this.whileTime, this);

      this.timerEnd = __bind(this.timerEnd, this);

      this.processingComplete = __bind(this.processingComplete, this);

      this.loadAssets = __bind(this.loadAssets, this);

      var _this = this;
      this.window = window;
      this.shakeThreshold = 500000;
      this.fabObjs = {};
      this.distanceTop = 0;
      this.currentTop = 0;
      this.oldTop = 0;
      this.distanceLeft = 0;
      this.currentLeft = 0;
      this.oldLeft = 0;
      this.totalDistance = 0;
      this.currentTimer = null;
      this.gameOn = false;
      this.initialise();
      this.canvas.observe('object:selected', function(e) {
        if (!_this.gameOn) {
          _this.gameOn = true;
          return _this.currentTimer = $('.timer').countdown({
            until: 5,
            format: 'S',
            onExpiry: _this.timerEnd,
            onTick: _this.whileTime,
            compact: true,
            tickInterval: 0
          });
        }
      });
      this.canvas.observe('object:moving', function(e) {
        _this.oldTop = _this.currentTop;
        _this.oldLeft = _this.currentLeft;
        _this.currentLeft = e.target.left;
        _this.currentTop = e.target.top;
        _this.distanceLeft += Math.abs(_this.currentLeft - _this.oldLeft);
        _this.distanceTop += Math.abs(_this.currentTop - _this.oldTop);
        return _this.totalDistance += _this.distanceTop + _this.distanceLeft;
      });
      this.canvas.renderAll();
    }

    SnowGlobe.prototype.initialise = function() {
      this.setUpCanvas();
      this.setMasterGroup();
      this.loadAssets();
      this.canvas.add(this.masterGroup);
      return this.canvas.renderAll(true);
    };

    SnowGlobe.prototype.loadAssets = function() {
      var ajaxRequest, getRequests, objNum, objectName, svgData, _i, _len,
        _this = this;
      getRequests = [];
      svgData = ['base', 'groundSnow', 'nunchucks', 'mac', 'conicals', 'table', 'simon', 'flask', 'bung'];
      objNum = 0;
      for (_i = 0, _len = svgData.length; _i < _len; _i++) {
        objectName = svgData[_i];
        ajaxRequest = $.get("/svg/" + objectName + ".svg", function(data, textStatus, jqXHR) {
          queue().defer(fabric.loadSVGFromString, jqXHR.responseText).await(function(fabObj) {
            objNum++;
            console.log(objNum);
            console.log(objectName);
            fabObj = fabObj.length > 1 ? new fabric.Group(fabObj.reverse()) : fabObj[0];
            fabObj.hasBorders = false;
            fabObj.hasControls = false;
            fabObj.active = true;
            fabObj.set('left', 0).set('top', 0);
            _this.masterGroup.add(fabObj);
            _this.canvas.renderAll();
            return _this.fabObjs[objNum] = fabObj;
          });
          return true;
        });
        getRequests.push(ajaxRequest);
      }
      return $.when.apply(null, getRequests).done(function() {
        return _this.processingComplete();
      });
    };

    SnowGlobe.prototype.setUpCanvas = function() {
      this.canvas = new fabric.Canvas('canvas', {
        selection: false
      });
      this.canvas.backgroundColor = '#D0E9F0';
      return this.setCanvasSize();
    };

    SnowGlobe.prototype.processingComplete = function() {
      return console.log(this.fabObjs);
    };

    SnowGlobe.prototype.setMasterGroup = function() {
      this.masterGroup = new fabric.Group();
      this.masterGroup.hasBorders = false;
      this.masterGroup.hasControls = false;
      this.masterGroup.set('width', 178).set('height', 267).scale(2);
      this.canvas.centerObject(this.masterGroup);
      return this.canvas.renderAll();
    };

    SnowGlobe.prototype.setCanvasSize = function() {
      var height, width;
      width = this.window.width();
      height = this.window.height();
      return this.canvas.setWidth(width).setHeight(height);
    };

    SnowGlobe.prototype.timerEnd = function() {
      this.gameOn = false;
      console.log("You scored " + (this.translateScore(this.totalDistance)) + "%");
      this.currentTimer.countdown('destroy');
      this.resetScore();
      return console.log("Finished");
    };

    SnowGlobe.prototype.whileTime = function() {
      return console.log(this.totalDistance);
    };

    SnowGlobe.prototype.resetScore = function() {
      this.distanceTop = 0;
      this.currentTop = 0;
      this.oldTop = 0;
      this.distanceLeft = 0;
      this.currentLeft = 0;
      this.oldLeft = 0;
      return this.totalDistance = 0;
    };

    SnowGlobe.prototype.translateScore = function(score) {
      var topScore;
      topScore = 10000000;
      return score / topScore * 100;
    };

    return SnowGlobe;

  })();

  if (typeof window !== "undefined" && window !== null) {
    window.SnowGlobe = SnowGlobe;
  }

  $(function() {
    var globe;
    return globe = new SnowGlobe($(window));
  });

}).call(this);
