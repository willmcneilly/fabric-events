// Generated by CoffeeScript 1.3.3
(function() {

  $(function() {
    var findObj, getPixelPosOfObject, getPixelPosOfObjectWithinGroup, hover, isSelected, mouseDown, mouseMove, mouseUp, path, rect, rect2, rect3, rect4, rect5,
      _this = this;
    this.isMouseDown = false;
    this.isMouseDragged = false;
    this.currentlySelected = null;
    getPixelPosOfObject = function(object, axis) {
      if (axis === 'x') {
        return object.get('left') - (object.get('currentWidth') / 2);
      } else if (axis === 'y') {
        return object.get('top') - (object.get('currentHeight') / 2);
      } else {
        return console.log('No axis defined');
      }
    };
    getPixelPosOfObjectWithinGroup = function(object, parentGroup, axis) {
      var groupScaleX, groupScaleY, x, y;
      if (axis === 'x') {
        groupScaleX = parentGroup.get('scaleX');
        x = object.get('left') + ((parentGroup.get('width') / 2) - (object.get('width') / 2));
        return x = x * groupScaleX;
      } else if (axis === 'y') {
        groupScaleY = parentGroup.get('scaleY');
        y = object.get('top') + ((parentGroup.get('height') / 2) - (object.get('height') / 2));
        return y = y * groupScaleY;
      } else {
        return console.log('No axis defined');
      }
    };
    mouseDown = function(e) {
      _this.isMouseDown = true;
      _this.selectedObj = findObj(e.e.layerX, e.e.layerY);
      if (_this.currentlySelected) {
        return _this.currentlySelected.obj.set('active', true);
      }
    };
    mouseUp = function(e) {
      _this.isMouseDown = false;
      if (_this.currentlySelected !== null) {
        _this.currentlySelected.obj.set('active', false);
        _this.canvas.renderAll();
        return _this.currentlySelected = null;
      }
    };
    mouseMove = function(e) {
      var masterGroupScaleX, masterGroupScaleY;
      if (_this.isMouseDown && _this.currentlySelected) {
        masterGroupScaleY = _this.masterGroup.get('scaleY');
        masterGroupScaleX = _this.masterGroup.get('scaleX');
        _this.currentlySelected.obj.set('left', ((e.e.layerX - _this.currentlySelected.masterGroupPxPosX) - ((_this.masterGroup.get('currentWidth') / 2) - (_this.currentlySelected.objWidth / 2)) - _this.currentlySelected.selectedAreaX) / masterGroupScaleX);
        _this.currentlySelected.obj.set('top', ((e.e.layerY - _this.currentlySelected.masterGroupPxPosY) - ((_this.masterGroup.get('currentHeight') / 2) - (_this.currentlySelected.objHeight / 2)) - _this.currentlySelected.selectedAreaY) / masterGroupScaleY);
        return _this.canvas.renderAll();
      }
    };
    hover = function(e) {
      console.log('object Over');
      return console.log(e);
    };
    findObj = function(mouseX, mouseY) {
      var index, masterGroupPxPosX, masterGroupPxPosY, obj, objHeight, objWidth, pixPosFromCanvasX, pixPosFromCanvasY, pixPosInGroupX, pixPosInGroupY, _ref, _results;
      masterGroupPxPosX = getPixelPosOfObject(_this.masterGroup, 'x');
      masterGroupPxPosY = getPixelPosOfObject(_this.masterGroup, 'y');
      _ref = _this.masterGroup.objects;
      _results = [];
      for (index in _ref) {
        obj = _ref[index];
        objWidth = obj.get('width') * _this.masterGroup.get('scaleX');
        objHeight = obj.get('height') * _this.masterGroup.get('scaleY');
        pixPosInGroupX = getPixelPosOfObjectWithinGroup(obj, _this.masterGroup, 'x');
        pixPosInGroupY = getPixelPosOfObjectWithinGroup(obj, _this.masterGroup, 'y');
        pixPosFromCanvasX = pixPosInGroupX + masterGroupPxPosX;
        pixPosFromCanvasY = pixPosInGroupY + masterGroupPxPosY;
        if (isSelected(mouseX, mouseY, pixPosFromCanvasX, pixPosFromCanvasY, objWidth, objHeight)) {
          _results.push(_this.currentlySelected = {
            obj: obj,
            masterGroup: _this.masterGroup,
            objWidth: objWidth,
            objHeight: objHeight,
            mouseX: mouseX,
            mouseY: mouseY,
            selectedAreaX: mouseX - pixPosFromCanvasX,
            selectedAreaY: mouseY - pixPosFromCanvasY,
            masterGroupPxPosX: masterGroupPxPosX,
            masterGroupPxPosY: masterGroupPxPosY
          });
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    isSelected = function(mouseX, mouseY, pixPosFromCanvasX, pixPosFromCanvasY, objWidth, objHeight) {
      if (mouseX >= pixPosFromCanvasX && mouseX <= pixPosFromCanvasX + objWidth) {
        if (mouseY >= pixPosFromCanvasY && mouseY <= pixPosFromCanvasY + objHeight) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    this.canvas = new fabric.Canvas('canvas');
    this.canvas.selection = false;
    path = "M110.689 661.75q34.0957 0 54.4473 -19.6992q21.8965 -19.7002 21.8965 -55.7695v-220.844l141.281 121l0.34375 -0.40625q20.2031 15.5625 45.7188 15.5625q31.0508 0 53.0254 -21.9746t21.9746 -53.0254q0 -21.0391 -10.7559 -38.6787 q-10.7559 -17.6387 -28.6504 -27.3213l-91.0312 -78.6875l135.438 -166.781q13.5 -16.624 13.5 -43.625q-0.00195312 -31.0518 -21.9746 -53.0254q-21.9746 -21.9746 -53.0254 -21.9746q-35.0371 0 -57.5625 26.9688l-130.469 159.812l-17.8125 -15.375v-93.0625 q0 -30.8301 -20.5332 -51.9619t-54.7168 -21.1318q-32.5996 0 -53.1895 20.2246q-20.5938 20.2256 -20.5938 50.9316v510.5q0 32.3896 20.375 55.3672q20.375 22.9766 52.3145 22.9766z";
    rect = new fabric.Rect();
    rect2 = new fabric.Rect();
    rect3 = new fabric.Rect();
    rect4 = new fabric.Rect();
    rect5 = new fabric.Rect();
    this.masterGroup = new fabric.Group();
    this.masterGroup.set('width', 400);
    this.masterGroup.set('height', 400);
    this.masterGroup.set('top', 400);
    this.masterGroup.set('left', 400);
    this.masterGroup.set('selectable', false);
    this.masterGroup.scale(0.4);
    rect.set('fill', 'red');
    rect.set('width', 100);
    rect.set('height', 100);
    rect.set('left', 0);
    rect.set('top', 0);
    rect2.set('fill', 'black');
    rect2.set('width', 50);
    rect2.set('height', 50);
    rect2.set('left', 25);
    rect2.set('top', 25);
    rect3.set('fill', 'blue');
    rect3.set('width', 50);
    rect3.set('height', 70);
    rect3.set('left', 20);
    rect3.set('top', 40);
    rect4.set('fill', 'yellow');
    rect4.set('width', 100);
    rect4.set('height', 150);
    rect4.set('left', -50);
    rect4.set('top', -50);
    rect4.set('fill', 'orange');
    rect4.set('width', 25);
    rect4.set('height', 25);
    rect4.set('left', -300);
    rect4.set('top', -300);
    rect5.set('fill', 'green');
    rect5.set('width', 10);
    rect5.set('height', 10);
    rect5.set('left', 200);
    rect5.set('top', 200);
    this.masterGroup.add(rect).add(rect2).add(rect3).add(rect4);
    this.canvas.add(this.masterGroup);
    this.canvas.add(rect5);
    this.masterGroup.center();
    this.canvas.findTarget = (function(originalFn) {
      return function() {
        var target;
        target = originalFn.apply(this, arguments);
        if (target) {
          if (this._hoveredTarget !== target) {
            this.canvas.fire("object:over", {
              target: target
            });
            if (this._hoveredTarget) {
              this.canvas.fire("object:out", {
                target: this._hoveredTarget
              });
            }
            this._hoveredTarget = target;
          }
        } else if (this._hoveredTarget) {
          this.canvas.fire("object:out", {
            target: this._hoveredTarget
          });
          this._hoveredTarget = null;
        }
        return target;
      };
    })(this.canvas.findTarget);
    this.canvas.on('object:over', function(e) {
      console.log('hover over');
      return canvas.renderAll();
    });
    this.canvas.on('object:out', function(e) {
      console.log('hover out');
      return canvas.renderAll();
    });
    this.canvas.observe('mouse:down', mouseDown);
    this.canvas.observe('mouse:up', mouseUp);
    this.canvas.observe('mouse:move', mouseMove);
    this.canvas.renderAll();
    return console.log(this.canvas);
  });

}).call(this);
